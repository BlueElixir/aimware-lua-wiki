{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This is not the official aimware lua documentation. For the official documentation visit docs.aimware.net.</p>"},{"location":"#contacts","title":"Contacts","text":"<ul> <li>Discord: Discord server</li> <li>Aimware: https://aimware.net/forum/user/404765</li> </ul> <p>Please contact me if you find any problems with the wiki or you have questions that have not been answered in the documentation.</p>"},{"location":"lua/introduction/","title":"Introduction","text":""},{"location":"lua/introduction/#introduction","title":"Introduction","text":"<p>This wiki was designed to help new developers out when it comes to coding in lua. The tutorials are focused around scripting in CS:GO using the aimware lua api.</p> <p>If you're completely new to programming or scripting I recommend you check out the official Lua documentation first. The examples section is a good place to learn too. All code blocks contain comments that make it much easier to understand what the code does.</p>"},{"location":"lua/introduction/#code-editors-and-preparation","title":"Code editors and preparation","text":"<p>You can write code using any text editor, but here are my personal recommendations:</p> <ul> <li>Notepad++ - fast and simple code editor that supports lots of languages</li> <li>Visual Studio Code - more advanced code editor that has addons like snippets (automatic code completion) and error checking (language server)</li> </ul>"},{"location":"lua/introduction/#_1","title":"Introduction","text":"<p>Other text editors will work too, but I highly advise against any of these:</p> <ul> <li>Built-in Lua editor - after V5.1 the editor was heavily improved, but it still can't compare with proper code editors</li> <li>Notepad, MS Word, Google Docs (or any similar editors not made for coding) - general lack of features (line numbers, syntax highlighting, automatic indenting etc.)</li> </ul> Avoiding encoding errors <p>To avoid any unnecessary errors and issues, please select the UTF-8 text encoding in your code editor's settings.</p> Testing out code examples <p>To test code examples from the Lua basics page you can use this online Lua interpreter. Simply copy the code and paste it into the text editor on the website. You can also play around and try to write some of your own code. Note that it does not support the aimware Lua API.</p>"},{"location":"lua/lua%20basics/","title":"Lua basics","text":""},{"location":"lua/lua%20basics/#lua-basics","title":"Lua basics","text":"<p>This is some basic information on how Lua scripting works. Think of it as an introduction and a tutorial. If you want to broaden your knowledge I highly recommend checking out the official Lua documentation as it contains much more detailed information.</p>"},{"location":"lua/lua%20basics/#variables","title":"Variables","text":"<p>Variables hold certain types of data. In Lua, just like a lot of other programming languages, there are local and global variables. However, unlike most programming languages, in Lua, the data type (int, string, float etc.) is determined automatically (just like in Javascript or in C++ using the <code>auto</code> keyword. Here is an example of defining variables:</p> <pre><code>My_variable = \"my text\"\nlocal my_local_variable = \"my text\"\n</code></pre> <p>The keyword <code>local</code> indicates that the variable we created, in this case <code>my_local_variable</code>, is local and only accessible inside the currently active function (or if it is outside of a function, in the current script file). Skipping the keyword <code>local</code> and just assigning a value to a variable name makes it a global variable. What this means is that other scripts running on the same machine can access its value. script1.lua<pre><code>local text = \"i am a variable\"\nmoretext = \"i have more text\"\n</code></pre></p> script2.lua<pre><code>print(text)\nprint(moretext)\n</code></pre> <p>If we tried running these two scripts (first we run <code>script1.lua</code> then <code>script2.lua</code>) the second script will throw an error, because the variable <code>text</code> is not defined in its scope.</p> script2.lua (edited)<pre><code>-- print(text) -- comment out the line as variable text is undefined\nprint(moretext)\n</code></pre> <p>This example will compile and output <code>i have more text</code> into the console, because <code>script2.lua</code> can read the text in <code>moretext</code> as it is a global variable.</p>"},{"location":"lua/lua%20basics/#variable-naming","title":"Variable namingStyle 1Style 2","text":"<p>More information is available in the Lua documentation [1]. Just like in C++ and other programming languages, when creating variables you must follow these rules:</p> <ul> <li>Names can contain letters, digits and underscores</li> <li>Names must begin with a letter or an underscore (_)</li> <li>Names are case sensitive (myVar and myvar are different variables)</li> <li>Names cannot contain whitespaces ( ) or special characters like !, #, %, etc.</li> <li>Reserved words (like Lua keywords, such as <code>local</code> or <code>for</code>) cannot be used as names</li> </ul> <p> The following are GOOD examples of variable names:</p> <pre><code>local myVar             -- starts with a letter, has no spaces or special characters\nlocal number_variable   -- starts with a letter, has no spaces and has an underscore\nlocal _var              -- starts with an underscore, has no spaces\nlocal lineOf_text1125   -- starts with a letter, has no spaces, has numbers and an underscore\n</code></pre> <p> The following are BAD examples of variable names:</p> <pre><code>local 1var2             -- bad, starts with a number\nlocal !hello            -- bad, starts with a special character\nlocal v@r1@b13          -- bad, has special characters\nlocal lineOf text1125   -- bad, has a space\nlocal for               -- bad, for is a reserved word\n</code></pre> Naming styles <p>When you first start coding you might feel a bit lost on how you should name your variables. You might also think that it makes no difference to how the program works and executes commands and you would be correct. Unfortunately, programming is not as easy as you might think. Sometimes you can make a mistake and fixing it requires editing the code. Using a proper naming and coding style will help you understand the code better and detect errors much quicker.</p> <p>Of course, you can do whatever you desire as it is your code, but sticking to a single proper style makes your code much easier to read and understand. You can try either of these styles and see which is more to your liking.</p> <p></p> <ul> <li>for variables, start with a lowercase letter and capitalise every other word, for example <code>local myVariableHere</code></li> <li>for functions, start with a capital letter and capitalise every other word, for example <code>local function DoMathEquation()</code></li> </ul> <p></p> <ul> <li>for variables, start with a lowercase letter and put an underscore in between each word, for example <code>local my_variable_here</code></li> <li>for functions, start with a capital letter and put an underscore in between each word, for example <code>local function Do_math_equation()</code></li> </ul> Naming styles <p>When you choose a naming style, always stick to it. That way, you will eventually get used to writing using only that style without ever having to think.  It is also important to note, that using multiple different styles in one project / file should be avoided. This also applies to whenever you edit someone else's code - stick to their style or, if the code is simple, rewrite it in your own style and stick to it.</p>"},{"location":"lua/lua%20basics/#functions","title":"Functions","text":"<p>More information is available in the Lua documentation [1][2]. A function is a group of statements that together perform a task. An example of a function would be the following:</p> myfirstfunction.lua<pre><code>local function addtwo(a, b)\nreturn a + b\nend\n</code></pre> <p>Let's analyse the code above one step at a time. The first line, <code>local function addtwo(a, b)</code> has the <code>local</code> keyword, the word <code>function</code>, the function name <code>addtwo</code> and two parameters <code>a</code> and <code>b</code>.</p> <ul> <li><code>local</code> makes the function only accessible in the <code>myfirstfunction.lua</code> script file</li> <li><code>function</code> tells the interpretor (compiler) that we are defining a function and not a variable</li> <li><code>addtwo</code> is a name; it follows the same naming conventions as normal variables</li> <li><code>(a, b)</code>, from which <code>a</code> and <code>b</code> are parameters that must have arguments passed when calling the function; the parentheses tell the interpreter that in the function definition we have two variables <code>a</code> and <code>b</code>.</li> </ul> <p> The next line, <code>return a + b</code>, is very simple. The keyword <code>return</code> means that this is where the function should finish it's job and return a value, in our case it is <code>a + b</code>.</p> <ul> <li> <p><code>return</code> is a keyword used to return a value, essentially the result of the function, for example:     myfirstfunction.lua<pre><code>local function addtwo(a, b)\nreturn a + b\nend\nlocal sum = addtwo(2, 4) -- return value is 6, so `sum` is 6\nprint(sum) -- will print 6\n</code></pre></p> Note <p>Functions don't have to return a value, meaning the return statement is not necessary. The keyword <code>return</code> can also be used to end the function at any point.</p> </li> <li> <p><code>a + b</code> is what we want the function to return. Because we called the function <code>addtwo</code>, we want it to return a sum of the numbers we gave it.</p> </li> </ul> <p> You might've just noticed a few new terms - calling a function and passing arguments to functions.</p> <ul> <li>Calling a function means we are essentially telling the function to start: <code>addtwo(2, 4)</code></li> <li>Passing the arguments means we give the function's parameters a value, in this case, <code>a</code> will be set to <code>2</code> and <code>b</code> will be set to <code>4</code></li> <li>The return value will be <code>6</code> because <code>2 + 4</code> is <code>6</code>.</li> </ul> <p> The final line contains a single keyword - <code>end</code>. It simply means the end of a function. For example, in Lua we would type:</p> <pre><code>local function func()\n-- code here\nreturn\nend\n</code></pre> <p>but in C/C++ we don't use <code>end</code>, instead we use curly brackets:</p> <pre><code>void func() {\n// code here\nreturn;\n}\n</code></pre> <p>Essentially speaking, the <code>end</code> keyword works just like the closing brackets in other programming languages (C/C++/Java/Javascript etc).</p>"},{"location":"lua/lua%20basics/#other-useful-features-of-lua","title":"Other useful features of Lua","text":"<p>More information is available in the Lua documentation [1][2]. The keyword <code>end</code> is not only used at the end of a function definition, but also in the <code>if</code> statement, along with <code>for</code> and <code>while</code> loops, for example: if.lua<pre><code>local a = 1\nif a == 1 then          -- if a is 1 then\nprint(\"a = 1\")      -- print `a = 1`\nelseif a == 2 then     -- if a is not 1 and is 2 then\nprint(\"a = 2\")      -- print `a = 2`\nelse                    -- if a is not 1 nor 2\nprint(\"a = \" .. a)  -- print `a = ?` where ? is the value of a\nend\n</code></pre></p> forloop.lua<pre><code>for i = 1, 10 do\nprint(i)\nend\n</code></pre> <ul> <li><code>for</code> starts the loop, <code>i = 1</code> creates a local variable <code>i</code> and assigns the value <code>1</code> to it, <code>10</code> means how many times the loop should repeat and <code>do</code> is the starting point of the loop</li> <li><code>print(i)</code> prints the current value of <code>i</code> to the console (1 - 10)</li> <li><code>end</code> means the end of the loop</li> </ul> whileloop.lua<pre><code>local i = 0\nwhile i &lt; 10 do\ni = i + 1\nprint(i)\nend\n</code></pre> <ul> <li><code>local i = 0</code> defines a new variable called <code>i</code> and assigns the value <code>0</code> to it</li> <li><code>while</code> is a loop that executes as long as the following condition (<code>i &lt; 10</code>) is true, do is the starting point of the loop</li> <li><code>i = i + 1</code> is required as the while loop does not automatically increment <code>i</code></li> <li><code>print(i)</code> prints the current value of <code>i</code> to the console (1-10)</li> <li><code>end</code> means the end of the loop</li> </ul> <p>More detailed code examples [1].</p>"}]}